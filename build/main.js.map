{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v1.16.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core'\n\nimport {\n    Device,\n    Group,\n    ComfortCloudClient,\n    Parameters,\n    Power,\n    AirSwingLR,\n    AirSwingUD,\n    FanAutoMode,\n    EcoMode,\n    OperationMode,\n    FanSpeed,\n    TokenExpiredError,\n    ServiceError,\n    NanoeMode\n} from 'panasonic-comfort-cloud-client'\n\nimport * as _ from 'lodash'\nimport axios from 'axios'\n\nconst REFRESH_INTERVAL_IN_MINUTES_DEFAULT = 5\n\nclass PanasonicComfortCloud extends utils.Adapter {\n\n    private comfortCloudClient: ComfortCloudClient = new ComfortCloudClient()\n\n    private refreshTimeout: NodeJS.Timeout | undefined\n    private refreshIntervalInMinutes = REFRESH_INTERVAL_IN_MINUTES_DEFAULT\n\n    private readonlyStateNames: string[] = [] \n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'panasonic-comfort-cloud',\n        })\n\n        this.on('ready', this.onReady.bind(this))\n        this.on('objectChange', this.onObjectChange.bind(this))\n        this.on('stateChange', this.onStateChange.bind(this))\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this))\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.refreshIntervalInMinutes = this.config?.refreshInterval ?? REFRESH_INTERVAL_IN_MINUTES_DEFAULT\n        this.subscribeStates('*')\n\n        this.setState('info.connection', false, true);\n\n        const loadedAppVersion = await this.getCurrentAppVersion()\n        this.log.info(`Loaded app version from App store: ${loadedAppVersion}`)\n        if(loadedAppVersion && this.trimAll(this.config?.appVersionFromAppStore) != this.trimAll(loadedAppVersion)) {\n            this.updateConfig({ appVersionFromAppStore: this.trimAll(loadedAppVersion), password: this.encrypt(this.config?.password) }) \n            return\n        }\n\n        if(!this.config?.username || !this.config?.password) {\n            this.log.error('Can not start without username or password. Please open config.')\n        } else {\n            if(this.config?.appVersionFromAppStore != '' && this.config?.useAppVersionFromAppStore)\n            {\n                this.log.debug(`Use AppVersion from App Store ${this.config?.appVersionFromAppStore}.`)\n                this.comfortCloudClient = new ComfortCloudClient(this.config?.appVersionFromAppStore)\n            }\n            else if(this.config?.appVersion != '')\n            {\n                this.log.debug(`Use configured AppVersion ${this.config?.appVersion}.`)\n                this.comfortCloudClient = new ComfortCloudClient(this.config?.appVersion)\n            }\n            else\n            {\n                this.log.debug(`Use default AppVersion.`)\n                this.comfortCloudClient = new ComfortCloudClient()\n            }\n\n            try {\n                this.log.debug(`Try to login with username ${this.config.username}.`)\n                await this.comfortCloudClient.login(\n                    this.config.username,\n                    this.config.password\n                )\n                this.log.info('Login successful.')\n                this.setState('info.connection', true, true)\n                this.log.debug('Create devices.')\n                const groups = await this.comfortCloudClient.getGroups()\n                await this.createDevices(groups)\n\n                this.log.debug(`Automativ refresh is set to ${this.config?.automaticRefreshEnabled}.`)\n                if(this.config?.automaticRefreshEnabled) {\n                    this.setupRefreshTimeout()\n                }\n                \n            } catch (error) {\n                await this.handleClientError(error)\n            }\n        }\n    }\n\n    private async refreshDeviceStates(device: Device): Promise<void> {\n        this.log.debug(`Refresh device ${device.name} (${device.guid}).`)\n        this.log.debug(`${device.name}: guid => ${device.guid}.`)\n        \n        this.log.debug(`${device.name}: operate => ${device.operate}.`)\n        await this.setStateChangedAsync(\n            `${device.name}.operate`,\n            device.operate,\n            true\n        )\n        this.log.debug(`${device.name}: temperatureSet => ${device.temperatureSet}.`)\n        await this.setStateChangedAsync(\n            `${device.name}.temperatureSet`,\n            device.temperatureSet,\n            true\n        )\n        this.log.debug(`${device.name}: insideTemperature => ${device.insideTemperature}.`)\n        await this.setStateChangedAsync(\n            `${device.name}.insideTemperature`,\n            device.insideTemperature,\n            true\n        )\n        this.log.debug(`${device.name}: outTemperature => ${device.outTemperature}.`)\n        await this.setStateChangedAsync(\n            `${device.name}.outTemperature`,\n            device.outTemperature,\n            true\n        )\n        this.log.debug(`${device.name}: airSwingLR => ${device.airSwingLR}.`)\n        await this.setStateChangedAsync(\n            `${device.name}.airSwingLR`,\n            device.airSwingLR,\n            true\n        )\n        this.log.debug(`${device.name}: airSwingUD => ${device.airSwingUD}.`)\n        await this.setStateChangedAsync(\n            `${device.name}.airSwingUD`,\n            device.airSwingUD,\n            true\n        )\n        this.log.debug(`${device.name}: fanAutoMode => ${device.fanAutoMode}.`)\n        await this.setStateChangedAsync(\n            `${device.name}.fanAutoMode`,\n            device.fanAutoMode,\n            true\n        )\n        this.log.debug(`${device.name}: ecoMode => ${device.ecoMode}.`)\n        await this.setStateChangedAsync(\n            `${device.name}.ecoMode`,\n            device.ecoMode,\n            true\n        )\n        this.log.debug(`${device.name}: operationMode => ${device.operationMode}.`)\n        await this.setStateChangedAsync(\n            `${device.name}.operationMode`,\n            device.operationMode,\n            true\n        )\n        this.log.debug(`${device.name}: fanSpeed => ${device.fanSpeed}.`)\n        await this.setStateChangedAsync(\n            `${device.name}.fanSpeed`,\n            device.fanSpeed,\n            true\n        )\n        this.log.debug(`${device.name}: actualNanoe => ${device.actualNanoe}.`)\n        await this.setStateChangedAsync(\n            `${device.name}.actualNanoe`,\n            device.actualNanoe,\n            true\n        )\n        await this.setStateChangedAsync(\n            `${device.name}.connected`,\n            true,\n            true\n        )\n        this.log.debug(`Refresh device ${device.name} finished.`)\n    }\n\n    private async refreshDevice(guid: string, deviceName: string): Promise<void> {\n        try {\n            const device = await this.comfortCloudClient.getDevice(guid, deviceName)\n            if (!device) {\n                return\n            }\n            if (!device.name) {\n                device.name = deviceName\n            }\n            await this.refreshDeviceStates(device)\n        } catch (error) {\n            await this.handleDeviceError(deviceName, error)\n        }\n    }\n\n    private async refreshDevices(): Promise<void> {\n        try {\n            this.log.debug('Refresh all devices.')\n            const groups = await this.comfortCloudClient.getGroups()\n            this.setState('info.connection', true, true);\n            const devices = _.flatMap(groups, g => g.devices)\n            const deviceInfos = _.map(devices, d => { return{guid: d.guid, name: d.name}})\n            await Promise.all(deviceInfos.map(async (deviceInfo) => {\n                try {\n                    const device = await this.comfortCloudClient.getDevice(deviceInfo.guid, deviceInfo.name)\n                    if(device != null) {\n                        device.name = deviceInfo.name\n                        device.guid = deviceInfo.guid\n                        await this.refreshDeviceStates(device)\n                    }\n                } catch (error) {\n                    await this.handleDeviceError(deviceInfo.name, error)\n                }\n            }))\n        } catch (error) {\n            await this.handleClientError(error)\n        }\n    }\n\n    private async createDevices(groups: Array<Group>): Promise<void> {\n        const devicesFromService = _.flatMap(groups, g => g.devices)\n        const deviceInfos = _.map(devicesFromService, d => { return {guid: d.guid, name: d.name}})\n        await Promise.all(deviceInfos.map(async (deviceInfo) => {\n            this.log.debug(`Device info from group ${deviceInfo.guid}, ${deviceInfo.name}.`)\n            let device: Device | null = null\n            try {\n                device = await this.comfortCloudClient.getDevice(deviceInfo.guid, deviceInfo.name)\n            } catch(error) {\n                await this.handleDeviceError(deviceInfo.name, error)\n                return\n            }\n            \n            if(device != null) {\n                this.createDevice(deviceInfo.name)\n                this.createState(\n                    deviceInfo.name,\n                    '',\n                    'guid',\n                    { role: 'info.address', write: false, def: deviceInfo.guid, type: 'string' },\n                    undefined\n                )\n                this.readonlyStateNames.push('guid')\n\n                this.createState(\n                    deviceInfo.name,\n                    '',\n                    'operate',\n                    {\n                        role: 'switch.power',\n                        states: { 0: Power[0], 1: Power[1] },\n                        write: true,\n                        def: device.operate,\n                        type: 'number',\n                    },\n                    undefined\n                )\n                this.createState(\n                    deviceInfo.name,\n                    '',\n                    'temperatureSet',\n                    {\n                        role: 'level.temperature',\n                        write: true,\n                        def: device.temperatureSet,\n                        type: 'number',\n                    },\n                    undefined\n                )\n                this.createState(\n                    deviceInfo.name,\n                    '',\n                    'insideTemperature',\n                    {\n                        role: 'level.temperature',\n                        write: false,\n                        def: device.insideTemperature,\n                        type: 'number',\n                    },\n                    undefined\n                )\n                this.readonlyStateNames.push('insideTemperature')\n\n                this.createState(\n                    deviceInfo.name,\n                    '',\n                    'outTemperature',\n                    {\n                        role: 'level.temperature',\n                        write: false,\n                        def: device.outTemperature,\n                        type: 'number',\n                    },\n                    undefined\n                )\n                this.readonlyStateNames.push('outTemperature')\n\n                this.createState(\n                    deviceInfo.name,\n                    '',\n                    'airSwingLR',\n                    {\n                        role: 'state',\n                        states: {\n                            0: AirSwingLR[0],\n                            1: AirSwingLR[1],\n                            2: AirSwingLR[2],\n                            3: AirSwingLR[3],\n                            4: AirSwingLR[4],\n                        },\n                        write: true,\n                        def: device.airSwingLR,\n                        type: 'number',\n                    },\n                    undefined\n                )\n                this.createState(\n                    deviceInfo.name,\n                    '',\n                    'airSwingUD',\n                    {\n                        role: 'state',\n                        states: {\n                            0: AirSwingUD[0],\n                            1: AirSwingUD[1],\n                            2: AirSwingUD[2],\n                            3: AirSwingUD[3],\n                            4: AirSwingUD[4],\n                        },\n                        write: true,\n                        def: device.airSwingUD,\n                        type: 'number',\n                    },\n                    undefined\n                )\n                this.createState(\n                    deviceInfo.name,\n                    '',\n                    'fanAutoMode',\n                    {\n                        role: 'state',\n                        states: {\n                            0: FanAutoMode[0],\n                            1: FanAutoMode[1],\n                            2: FanAutoMode[2],\n                            3: FanAutoMode[3],\n                        },\n                        write: true,\n                        def: device.fanAutoMode,\n                        type: 'number',\n                    },\n                    undefined\n                )\n                this.createState(\n                    deviceInfo.name,\n                    '',\n                    'ecoMode',\n                    {\n                        role: 'state',\n                        states: { 0: EcoMode[0], 1: EcoMode[1], 2: EcoMode[2] },\n                        write: true,\n                        def: device.ecoMode,\n                        type: 'number',\n                    },\n                    undefined\n                )\n                this.createState(\n                    deviceInfo.name,\n                    '',\n                    'operationMode',\n                    {\n                        role: 'state',\n                        states: {\n                            0: OperationMode[0],\n                            1: OperationMode[1],\n                            2: OperationMode[2],\n                            3: OperationMode[3],\n                            4: OperationMode[4],\n                        },\n                        write: true,\n                        def: device.operationMode,\n                        type: 'number',\n                    },\n                    undefined\n                )\n                this.createState(\n                    deviceInfo.name,\n                    '',\n                    'fanSpeed',\n                    {\n                        role: 'state',\n                        states: {\n                            0: FanSpeed[0],\n                            1: FanSpeed[1],\n                            2: FanSpeed[2],\n                            3: FanSpeed[3],\n                            4: FanSpeed[4],\n                            5: FanSpeed[5],\n                        },\n                        write: true,\n                        def: device.fanSpeed,\n                        type: 'number',\n                    },\n                    undefined\n                )\n                this.createState(\n                    deviceInfo.name,\n                    '',\n                    'actualNanoe',\n                    {\n                        role: 'state',\n                        states: {\n                            0: NanoeMode[0],\n                            1: NanoeMode[1],\n                            2: NanoeMode[2],\n                            3: NanoeMode[3],\n                            4: NanoeMode[4],\n                        },\n                        write: true,\n                        def: device.actualNanoe,\n                        type: 'number',\n                    },\n                    undefined\n                )\n                this.createState(\n                    deviceInfo.name,\n                    '',\n                    'connected',\n                    { role: 'state', read: true, write: false, def: false, type: 'boolean' },\n                    undefined,\n                )\n\n                this.log.info(`Device ${deviceInfo.name} created.`)\n            }\n        }));\n        this.log.debug('Device creation completed.')\n    }\n\n    private async updateDevice(\n        deviceName: string,\n        stateName: string,\n        state: ioBroker.State\n    ): Promise<void> {\n        if(this.readonlyStateNames.includes(stateName)) {\n            return\n        }\n        if (!state.ack) {\n            const stateObj = await this.getObjectAsync(`${deviceName}.${stateName}`)\n            const stateCommon = stateObj?.common as ioBroker.StateCommon\n            if(stateCommon?.write == false) {\n                return\n            }\n\n            const guidState = await this.getStateAsync(`${deviceName}.guid`)\n            \n            this.log.debug(\n                `Update device guid=${guidState?.val} state=${stateName}`\n            )\n            const parameters: Parameters = {}\n            parameters[stateName] = state.val\n            if (!guidState?.val) {\n                return\n            }\n            try {\n                this.log.debug(`Set device parameter ${JSON.stringify(parameters)} for device ${guidState?.val}`)\n                await this.comfortCloudClient.setParameters(\n                    guidState?.val as string,\n                    parameters\n                )\n                this.log.debug(`Refresh device ${deviceName}`)\n                await this.refreshDevice(guidState?.val as string, deviceName)\n            } catch (error) {\n                await this.handleClientError(error)\n            }\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            if(this.refreshTimeout)\n                clearTimeout(this.refreshTimeout)\n\n            this.log.info('cleaned everything up...')\n            callback()\n        } catch (e) {\n            callback()\n        }\n    }\n\n    /**\n     * Is called if a subscribed object changes\n     */\n    private onObjectChange(\n        id: string,\n        obj: ioBroker.Object | null | undefined\n    ): void {\n        if (obj) {\n            // The object was changed\n            this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`)\n        } else {\n            // The object was deleted\n            this.log.info(`object ${id} deleted`)\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(\n        id: string,\n        state: ioBroker.State | null | undefined\n    ): Promise<void> {\n        if(!state || state.ack) {\n            return\n        }\n\n        if(id.includes('.commands.')) {\n            const elements = id.split('.')\n            const stateName = elements[elements.length - 1]\n            if(stateName == 'manualRefresh' && state.val) {\n                try {\n                    await this.refreshDevices()\n                    await this.setStateAsync(id, state, true)\n                } catch (error) {\n                    await this.handleClientError(error)\n                }\n                await this.setStateAsync(id, false, true)\n            }\n        }\n        else if (!id.includes('.info.')) {\n            const elements = id.split('.')\n            const deviceName = elements[elements.length - 2]\n            const stateName = elements[elements.length - 1]\n            try {\n                await this.updateDevice(deviceName, stateName, state)    \n            } catch (error) {\n                await this.handleClientError(error)\n            }\n            \n            // The state was changed\n            this.log.info(\n                `state ${id} changed: ${state.val} (ack = ${state.ack})`\n            )\n        }\n    }\n\n    private async getCurrentAppVersion() : Promise<string> {\n        const response = await axios.get('https://itunes.apple.com/lookup?id=1348640525')\n        if(response.status !== 200)\n            return ''\n        const version = await response.data.results[0].version\n        return version\n    }\n\n    private async handleDeviceError(deviceName: string, error: unknown): Promise<void> {\n        this.log.debug(`Try to handle device error for ${deviceName}.`)\n\n        await this.setStateChangedAsync(\n            `${deviceName}.connected`,\n            false,\n            true\n        )\n        \n        if (error instanceof ServiceError) {\n            this.log.error(\n                `Service error when connecting to device ${deviceName}: ${error.message}. Code=${error.code}. Stack: ${error.stack}`\n            )\n        } else if (error instanceof Error){\n            this.log.error(`Unknown error when connecting to device ${deviceName}: ${error}. Stack: ${error.stack}`)\n        }\n    }\n\n    private async handleClientError(error: unknown): Promise<void> {\n        this.log.debug('Try to handle error.')\n        \n        if (error instanceof TokenExpiredError) {\n            this.log.info(\n                `Token of comfort cloud client expired. Trying to login again. Code=${error.code}. Stack: ${error.stack}`\n            )\n            this.setState('info.connection', false, true);\n            await this.comfortCloudClient.login(\n                this.config.username,\n                this.config.password\n            )\n            this.setState('info.connection', true, true);\n            this.log.info('Login successful.')\n        } else if (error instanceof ServiceError) {\n            this.setState('info.connection', false, true);\n            this.log.error(\n                `Service error: ${error.message}. Code=${error.code}. Stack: ${error.stack}`\n            )\n        } else if (error instanceof Error){\n            this.log.error(`Unknown error: ${error}. Stack: ${error.stack}`)\n        }\n    }\n\n    private setupRefreshTimeout(): void {\n        this.log.debug('setupRefreshTimeout')\n        const refreshIntervalInMilliseconds = this.refreshIntervalInMinutes * 60 * 1000\n        this.log.debug(`refreshIntervalInMilliseconds=${refreshIntervalInMilliseconds}`)\n        this.refreshTimeout = setTimeout(this.refreshTimeoutFunc.bind(this), refreshIntervalInMilliseconds);\n    }\n\n    private async refreshTimeoutFunc(): Promise<void> {\n        this.log.debug(`refreshTimeoutFunc started.`)\n        try {\n            await this.refreshDevices()\n            this.setupRefreshTimeout()\n        } catch (error) {\n            await this.handleClientError(error)\n        }\n        \n    }\n\n    private trimAll(text: string): string {\n        const newText = text.trim().replace(/(\\r\\n|\\n|\\r)/gm, '');\n        return newText\n    }\n}\n\nif (module.parent) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) =>\n        new PanasonicComfortCloud(options)\n} else {\n    // otherwise start the instance directly\n    (() => new PanasonicComfortCloud())()\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
